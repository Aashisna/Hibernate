package com.model;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.criterion.Restrictions;

public class Test {
	
	public static void main(String[] args) {
		
		//add();
	//	getAll();
		//updateStudent();
		deleteStudent();
	}

	private static void add()
	{
		// this is hibernate configuration
		SessionFactory sf = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
		Session session = sf.openSession();
		session.beginTransaction();
		
		Student s = new Student();
		s.setFname("Hari");
		s.setLname("Lama");
		s.setCollege("NCIT");
		s.setCity("Pokhara");
		s.setAge(30);
		s.setRollno(409);
		
		session.save(s); //save query sql generated by the hibernate
		session.getTransaction().commit();  // commit 
		session.close();
	}
       public static void getAll()
       {
    		SessionFactory sf = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
    		Session session = sf.openSession();
    		
    		Criteria crt = session.createCriteria(Student.class);
    		//crt.add(Restrictions.eq("college", "NCIT"));
    	   //	crt.add(Restrictions.eq("rollno", 9));
    		
    		List<Student> sList = crt.list();
    		System.out.println(sList);
       }
       
       
       public static void updateStudent()
       {
    	SessionFactory sf = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
   		Session session = sf.openSession();
   		session.beginTransaction();
   		
   		Student s = (Student) session.get(Student.class, 1);
   		s.setCollege("IOE");
   		s.setCity("Lalitpur");
   		
   		session.update(s);
   		session.getTransaction().commit();
   		session.close();
       }
       
       public static void deleteStudent() 
       {
    	   SessionFactory sf = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
      		Session session = sf.openSession();
      		session.beginTransaction();
      		
      		Student s = (Student) session.get(Student.class, 1);
      		session.delete(s);
      		session.getTransaction().commit();
      		
       }
}

       
